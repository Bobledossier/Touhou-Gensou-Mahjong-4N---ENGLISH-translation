name: Combine Zip Files

on:
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  combine:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Find highest version number
        id: find_version
        run: |
          # Extract version numbers from directory names
          version_dirs=$(ls -d */ | grep -oP '^\d+\.\d+')
          highest_version=$(echo "$version_dirs" | sort -V | tail -n 1)
          echo "Highest version found: $highest_version"
          echo "::set-output name=highest_version::$highest_version"

      - name: Find the actual directory name
        id: find_directory
        run: |
          # Find the actual directory name that matches the highest version
          dir_name=$(ls -d "${{ steps.find_version.outputs.highest_version }} "* | head -n 1)
          echo "Directory name found: $dir_name"
          echo "::set-output name=dir_name::$dir_name"

      - name: Navigate to the directory and combine zip files
        run: |
          cd "${{ steps.find_directory.outputs.dir_name }}" || exit 1
          # Combine split zip files
          combined_zip_name="thmj4n ${{ steps.find_version.outputs.highest_version }}.zip"
          cat thmj4n.zip.* > "$combined_zip_name"

      - name: Upload Combined Zip as Artifact
        id: upload_artifact
        uses: actions/upload-artifact@v2
        with:
          name: combined-zip
          path: "${{ steps.find_directory.outputs.dir_name }}/$combined_zip_name"  # Path to the combined zip file

      - name: Add lesser versions to .gitignore and remove from index
        run: |
          # Get all version directories
          version_dirs=$(ls -d */ | grep -oP '^\d+\.\d+')
          # Loop through each version directory
          for version in $version_dirs; do
            # Check if the version is less than the highest version
            if [[ $(echo -e "${version}\n${{ steps.find_version.outputs.highest_version }}" | sort -V | head -n 1) == "$version" ]]; then
              echo "Adding $version to .gitignore"
              echo "$version *" >> .gitignore  # Add to .gitignore
              git rm -r --cached "$version"  # Remove from index
            fi
          done
          # Commit changes to .gitignore
          git add .gitignore
          git commit -m "Update .gitignore to exclude lesser version directories"

      - name: Delete old artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the list of artifacts
          artifacts=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/actions/artifacts")
          
          # Get the name of the most recent artifact
          current_artifact_name="combined-zip"
          current_artifact_id=$(echo "$artifacts" | jq -r --arg name "$current_artifact_name" '.artifacts[] | select(.name == $name) | .id')

          # Parse the artifact names and delete them, excluding the current artifact
          echo "$artifacts" | jq -r '.artifacts[] | select(.id != $current_artifact_id) | .id' | while read -r artifact_id; do
            echo "Deleting artifact with ID: $artifact_id"
            curl -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$artifact_id"
          done
